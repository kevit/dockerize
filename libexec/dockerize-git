#!/usr/bin/env bash
#
# Usage: dockerize git repo_url user/repository[:branch] [docker_image]
#
# Summary: Build images from git repositories
#
set -x
if [ -z "$(type -p git)" ]
then
  echo "Cannot find git. Is git installed and available in the PATH?"
  exit 1
fi

git_version="$(git --version | awk '{ print $3 }')"
git_version_num="${git_version//./}"

if [ "$git_version_num" -lt 1790 ]
then
  echo "git v1.7.9.0 or newer required"
  exit 1
fi

if [[ ! -e "$HOME/.git-credentials" && ! -e "$HOME/.no_prompting_for_git_credentials" ]]
then
  echo "Should git manage github credentials?"
  github_credentials_options=(
    "No, don't manage credentials"
    "Cache credentials for 10 minutes"
    "Store credentials in plaintext"
  )
  select answer in "${github_credentials_options[@]}"
  do
    touch "$HOME/.no_prompting_for_git_credentials"

    case $answer in
    "${github_credentials_options[0]}" )
      break
      ;;
    "${github_credentials_options[1]}" )
      git config --global credential.helper cache
      break
      ;;
    "${github_credentials_options[2]}" )
      git config --global credential.helper store
      echo "Storing github credentials in plaintext"
      read -p "Github username: " github_username
      read -p "Github password: " github_password
      echo "https://$github_username:$github_password@github.com" > $HOME/.git-credentials
      break
      ;;
    esac
  done
fi

if [ -z "$1" ]
then
  echo "Must specify a github user/repository"
  exit 1
fi
git_url=$1
github_repo_name_and_branch=(${2/:/ })
github_repo="${github_repo_name_and_branch[0]}"
github_repo_branch="${github_repo_name_and_branch[1]:-master}"
shift

docker_image="${1:-${github_repo/*\//}}"
cloned_repository="$DOCKER_GITHUB_REPOS/$docker_image"

if [ ! -e "$cloned_repository" ]
then
  $__exec "git clone ${git_url}${github_repo} $cloned_repository"
  $__exec "cd $cloned_repository"
else
  $__exec "cd $cloned_repository && git fetch"
fi

$__exec "git checkout -f origin/$github_repo_branch"
if [ $? -ne 0 ]
then
  echo "Branch origin/$github_repo_branch does not exist"
  exit 1
fi

commit_sha="$($__exec git rev-parse --short HEAD)"
docker_image_tag="${github_repo_branch}.${commit_sha}"

if [[ $PWD == $cloned_repository && ! -e Dockerfile ]]
then
  echo "This repository does not contain a Dockerfile, cannot build Docker image"
  exit 1
fi

if [[ -z $(dockerize images | grep $docker_image | grep " master ") ]]
then
  $__exec "docker build -no-cache -rm -t $docker_image:master ."
fi

if [[ -n $(dockerize images | grep $docker_image | grep $docker_image_tag) ]]
then
  echo "Container $docker_image:$docker_image_tag already built"
else
  $__exec "sed 's|FROM .*|FROM $docker_image:master|g' Dockerfile > Dockerfile.new"
  $__exec "mv Dockerfile Dockerfile.bak && mv Dockerfile.new Dockerfile"
  $__exec "docker build -no-cache -rm -t $docker_image:$docker_image_tag ."
fi
